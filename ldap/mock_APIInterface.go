// Code generated by mockery v1.0.0. DO NOT EDIT.

package ldap

import mock "github.com/stretchr/testify/mock"

// MockAPIInterface is an autogenerated mock type for the APIInterface type
type MockAPIInterface struct {
	mock.Mock
}

// connect provides a mock function with given fields:
func (_m *MockAPIInterface) connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// createComputer provides a mock function with given fields: dn, cn, attributes
func (_m *MockAPIInterface) createComputer(dn string, cn string, attributes map[string][]string) error {
	ret := _m.Called(dn, cn, attributes)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string][]string) error); ok {
		r0 = rf(dn, cn, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// createObject provides a mock function with given fields: dn, class, attributes
func (_m *MockAPIInterface) createObject(dn string, class []string, attributes map[string][]string) error {
	ret := _m.Called(dn, class, attributes)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, map[string][]string) error); ok {
		r0 = rf(dn, class, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// deleteComputer provides a mock function with given fields: dn
func (_m *MockAPIInterface) deleteComputer(dn string) error {
	ret := _m.Called(dn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// deleteObject provides a mock function with given fields: dn
func (_m *MockAPIInterface) deleteObject(dn string) error {
	ret := _m.Called(dn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// getComputer provides a mock function with given fields: dn, attributes
func (_m *MockAPIInterface) getComputer(dn string, attributes []string) (*Computer, error) {
	ret := _m.Called(dn, attributes)

	var r0 *Computer
	if rf, ok := ret.Get(0).(func(string, []string) *Computer); ok {
		r0 = rf(dn, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Computer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(dn, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getObject provides a mock function with given fields: dn, attributes
func (_m *MockAPIInterface) getObject(dn string, attributes []string) (*Object, error) {
	ret := _m.Called(dn, attributes)

	var r0 *Object
	if rf, ok := ret.Get(0).(func(string, []string) *Object); ok {
		r0 = rf(dn, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(dn, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// searchObject provides a mock function with given fields: filter, baseDN, attributes
func (_m *MockAPIInterface) searchObject(filter string, baseDN string, attributes []string) ([]*Object, error) {
	ret := _m.Called(filter, baseDN, attributes)

	var r0 []*Object
	if rf, ok := ret.Get(0).(func(string, string, []string) []*Object); ok {
		r0 = rf(filter, baseDN, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(filter, baseDN, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// updateComputerAttributes provides a mock function with given fields: dn, added, changed, removed
func (_m *MockAPIInterface) updateComputerAttributes(dn string, added map[string][]string, changed map[string][]string, removed map[string][]string) error {
	ret := _m.Called(dn, added, changed, removed)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string][]string, map[string][]string, map[string][]string) error); ok {
		r0 = rf(dn, added, changed, removed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// updateComputerOU provides a mock function with given fields: dn, cn, ou
func (_m *MockAPIInterface) updateComputerOU(dn string, cn string, ou string) error {
	ret := _m.Called(dn, cn, ou)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(dn, cn, ou)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// updateObject provides a mock function with given fields: dn, classes, added, changed, removed
func (_m *MockAPIInterface) updateObject(dn string, classes []string, added map[string][]string, changed map[string][]string, removed map[string][]string) error {
	ret := _m.Called(dn, classes, added, changed, removed)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, map[string][]string, map[string][]string, map[string][]string) error); ok {
		r0 = rf(dn, classes, added, changed, removed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
