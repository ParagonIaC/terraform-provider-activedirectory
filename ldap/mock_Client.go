// Code generated by mockery v1.0.0. DO NOT EDIT.

package ldap

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	tls "crypto/tls"

	"gopkg.in/ldap.v3"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *MockClient) Add(_a0 *ldap.AddRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ldap.AddRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bind provides a mock function with given fields: username, password
func (_m *MockClient) Bind(username string, password string) error {
	ret := _m.Called(username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockClient) Close() {
	_m.Called()
}

// Compare provides a mock function with given fields: dn, attribute, value
func (_m *MockClient) Compare(dn string, attribute string, value string) (bool, error) {
	ret := _m.Called(dn, attribute, value)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(dn, attribute, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(dn, attribute, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Del provides a mock function with given fields: _a0
func (_m *MockClient) Del(_a0 *ldap.DelRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ldap.DelRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExternalBind provides a mock function with given fields:
func (_m *MockClient) ExternalBind() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Modify provides a mock function with given fields: _a0
func (_m *MockClient) Modify(_a0 *ldap.ModifyRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ldap.ModifyRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyDN provides a mock function with given fields: _a0
func (_m *MockClient) ModifyDN(_a0 *ldap.ModifyDNRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ldap.ModifyDNRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordModify provides a mock function with given fields: _a0
func (_m *MockClient) PasswordModify(_a0 *ldap.PasswordModifyRequest) (*ldap.PasswordModifyResult, error) {
	ret := _m.Called(_a0)

	var r0 *ldap.PasswordModifyResult
	if rf, ok := ret.Get(0).(func(*ldap.PasswordModifyRequest) *ldap.PasswordModifyResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ldap.PasswordModifyResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ldap.PasswordModifyRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: _a0
func (_m *MockClient) Search(_a0 *ldap.SearchRequest) (*ldap.SearchResult, error) {
	ret := _m.Called(_a0)

	var r0 *ldap.SearchResult
	if rf, ok := ret.Get(0).(func(*ldap.SearchRequest) *ldap.SearchResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ldap.SearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ldap.SearchRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchWithPaging provides a mock function with given fields: searchRequest, pagingSize
func (_m *MockClient) SearchWithPaging(searchRequest *ldap.SearchRequest, pagingSize uint32) (*ldap.SearchResult, error) {
	ret := _m.Called(searchRequest, pagingSize)

	var r0 *ldap.SearchResult
	if rf, ok := ret.Get(0).(func(*ldap.SearchRequest, uint32) *ldap.SearchResult); ok {
		r0 = rf(searchRequest, pagingSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ldap.SearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ldap.SearchRequest, uint32) error); ok {
		r1 = rf(searchRequest, pagingSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTimeout provides a mock function with given fields: _a0
func (_m *MockClient) SetTimeout(_a0 time.Duration) {
	_m.Called(_a0)
}

// SimpleBind provides a mock function with given fields: _a0
func (_m *MockClient) SimpleBind(_a0 *ldap.SimpleBindRequest) (*ldap.SimpleBindResult, error) {
	ret := _m.Called(_a0)

	var r0 *ldap.SimpleBindResult
	if rf, ok := ret.Get(0).(func(*ldap.SimpleBindRequest) *ldap.SimpleBindResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ldap.SimpleBindResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ldap.SimpleBindRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *MockClient) Start() {
	_m.Called()
}

// StartTLS provides a mock function with given fields: _a0
func (_m *MockClient) StartTLS(_a0 *tls.Config) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tls.Config) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnauthenticatedBind provides a mock function with given fields: username
func (_m *MockClient) UnauthenticatedBind(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
